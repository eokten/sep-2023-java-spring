openapi: 3.0.3

info:
  title: Product Service API
  description: |-
    OpenAPI specification example based on Product model
  version: 0.0.1
  # API-first design

servers:
  - url: http://localhost:8080/api/v1

tags:
  - name: product

paths:
  "/products":
    get:
      security:
        - BearerAuth: []
      tags:
        - product
      summary: "Get all products"
      description: "Fetch all existing products"
      operationId: getProducts
      parameters:
        - in: query
          name: category
          required: false
          schema:
            type: string
          description: "Category name"
      responses:
        '200':
          $ref: "#/components/responses/ProductList"
        '400':
          description: Invalid request
    post:
      security:
        - BearerAuth: []
      tags:
        - product
      summary: "Create product"
      operationId: createProduct
      requestBody:
        $ref: "#/components/requestBodies/Product"
      responses:
        '201':
          $ref: "#/components/responses/Product"
        '400':
          description: Invalid request
        '422':
          description: Validation exception
  "/products/{id}":
    get:
      security:
        - BearerAuth: []
      tags:
        - product
      summary: "Get specific product"
      description: "Get product by id"
      operationId: getProduct
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: "Product ID"
      responses:
        '200':
          $ref: "#/components/responses/Product"
        '400':
          description: Invalid request
    put:
      security:
        - BearerAuth: []
      tags:
        - product
      summary: "Modify specific product"
      description: "Update only product properties included in the body"
      operationId: modifyProduct
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: "Product ID"
      requestBody:
        $ref: "#/components/requestBodies/Product"
      responses:
        '201':
          $ref: "#/components/responses/Product"
        '400':
          description: Invalid request
        '422':
          description: Validation exception
    patch:
      security:
        - BearerAuth: []
      tags:
        - product
      summary: "Modify specific product partially"
      description: "Update only product properties included in the body"
      operationId: modifyProductPartially
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: "Product ID"
      requestBody:
        $ref: "#/components/requestBodies/Product"
      responses:
        '201':
          $ref: "#/components/responses/Product"
        '400':
          description: Invalid request
        '422':
          description: Validation exception

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 10
        name:
          type: string
          example: "Asus Laptop Model 1"
          minLength: 3
          maxLength: 64
        price:
          type: number
          format: double
          example: 63999.99
        quantity:
          type: integer
          format: int32
          minimum: 0
          maximum: 1000
          writeOnly: true
        description:
          type: string
        category:
          type: string
        status:
          type: string
          readOnly: true
          description: Product status
          example: IN_STOCK
          enum:
            - IN_STOCK
            - OUT_OF_STOCK
            - DISCONTINUED
  responses:
    Product:
      description: Product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    ProductList:
      description: Product list
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Product'
  requestBodies:
    Product:
      description: Product to be created
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
